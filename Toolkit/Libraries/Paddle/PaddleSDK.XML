<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PaddleSDK</name>
    </assembly>
    <members>
        <member name="T:PaddleSDK.Paddle">
            <summary>
            Main class for interacting with the Paddle SDK.
            </summary>
        </member>
        <member name="F:PaddleSDK.Paddle.Credentials">
            <summary>
            The credentials used to identify this product.
            </summary>
        </member>
        <member name="F:PaddleSDK.Paddle.Store">
            <summary>
            The store that holds the data we save about products.
            </summary>
        </member>
        <member name="F:PaddleSDK.Paddle.Product">
            <summary>
            Provides functionality for interacting with the product (licence activation etc).
            </summary>
        </member>
        <member name="F:PaddleSDK.Paddle._Singleton">
            <summary>
            Singleton shared instance if created.
            </summary>
        </member>
        <member name="F:PaddleSDK.Paddle.Lock">
            <summary>
            Lock used for thread safety.
            </summary>
        </member>
        <member name="M:PaddleSDK.Paddle.#ctor(System.String,System.Int64,System.String)">
            <summary>
            Creates a new instance of the Paddle SDK for the given product information.
            </summary>
            <param name="apiKey">The Paddle API key used to commuinicate with Paddle.com for this product.</param>
            <param name="vendorId">The Id of the Paddle vendor for this product.</param>
            <param name="productId">The Id of the product being licensed.</param>
        </member>
        <member name="M:PaddleSDK.Paddle.SetFirstRunProductInformation(PaddleSDK.PaddleProductInformation)">
            <summary>
            Sets the product information for the first time the app is run. This information is used if the user is offline
            or the Paddle API can not be contacted to fetch current live product information. This way the user can still be
            prompted or given a trial. If this information is not set then the app will still call the API (but have no
            fallback). Live API data (and cached API data) is always favoured over the first run data.
            
            You do not have to specify all information, though a minimum of DeveloperName, ProductName, Currency, Price,
            and TrialLength is required.
            </summary>
        </member>
        <member name="M:PaddleSDK.Paddle.StartLicensing">
            <summary>
            Checks the liscensing state for this product. Will spawn a liscence dialog if required. Assumes a time trialed app.
            </summary>
        </member>
        <member name="M:PaddleSDK.Paddle.StartLicensing(System.Boolean)">
            <summary>
            Checks the liscensing state for this product. Will spawn a liscence dialog if required.
            </summary>
            <param name="isTimeTrialLimited">Whether this liscene is limited by time (true) or is unlimited but locked by feature (false)</param>
        </member>
        <member name="M:PaddleSDK.Paddle.DeactivateLicence">
            <summary>
            Deactivates the licence for this product.
            </summary>
        </member>
        <member name="M:PaddleSDK.Paddle.ShowLicensingWindow">
            <summary>
            Triggers the license window to be shown. This will show the liscence information used to activate the product.
            If the product is not activated the method will be ignored.
            </summary>
        </member>
        <member name="M:PaddleSDK.Paddle.ShowProductWindow(System.Boolean)">
            <summary>
            Triggers the product window to be shown.
            </summary>
            <param name="isTimeTrialLimited">Whether this liscene is limited by time (true) or is unlimited but locked by feature (false).</param>
            <returns>True if the app should continue, false if the app should exit.</returns>
        </member>
        <member name="M:PaddleSDK.Paddle.CreateSharedInstance(System.String,System.Int64,System.String)">
            <summary>
            Creates a shared instance (singleton) that can be statically referenced througout and application.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.ProductActivated">
            <summary>
            Gets whether or not this product has an activated liscence.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.DaysRemainingOnTrial">
            <summary>
            Gets the number of days remaining on this user's trial. A negative number shows the number of days since the trial ended.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.TrialLength">
            <summary>
            Gets the duration of this product's trial.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.ShowInTaskbar">
            <summary>
            Sets whether or not to show SDK windows in the task bar (default is true).
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.LicenceEmail">
            <summary>
            The email address that was used to register this product. Will be null if not activated.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.LicenceKey">
            <summary>
            The liscene key that was used to register this product. Will be null if not activated.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.ApiKey">
            <summary>
            The Paddle API key used to commuinicate with Paddle.com for this product.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.VendorId">
            <summary>
            The Id of the Paddle vendor for this product.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.ProductId">
            <summary>
            The Id of the product being licensed.
            </summary>
        </member>
        <member name="P:PaddleSDK.Paddle.SharedInstance">
            <summary>
            Gets the shared instance (singleton) previously created with CreateSharedInstance(...).
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleCredentials.#ctor(System.String,System.Int64,System.String)">
            <summary>
            Creates a new PaddleCredentials to wrap the authentication information that identifies this product.
            </summary>
            <param name="apiKey">The Paddle API key used to commuinicate with Paddle.com for this product.</param>
            <param name="vendorId">The Id of the Paddle vendor for this product.</param>
            <param name="productId">The Id of the product being licensed.</param>
        </member>
        <member name="P:PaddleSDK.PaddleCredentials.ApiKey">
            <summary>
            The Paddle API key used to commuinicate with Paddle.com for this product.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleCredentials.VendorId">
            <summary>
            The Id of the Paddle vendor for this product.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleCredentials.ProductId">
            <summary>
            The Id of the product being licensed.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.PaddleRegistryRoot">
            <summary>
            The product Id this store is writing for.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.ProductId">
            <summary>
            The product Id this store is writing for.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.Data">
            <summary>
            The dictionary we store all our data in.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.StoreCryptography">
            <summary>
            The encryption key we use.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.RegistryKey">
            <summary>
            The registry key we hold everything under.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.Serializer">
            <summary>
            Serializer we use for writing data.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStore.IsLoaded">
            <summary>
            Gets if the dictionary has been populated yet or not.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.#ctor(System.String)">
            <summary>
            Creates a new instace of the PaddleDataStore for storing data about the app.
            </summary>
            <param name="productId"></param>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.StoreValue(System.String,System.Object)">
            <summary>
            Stores a value in our data store. Will overwrite if a value already exists.
            </summary>
            <param name="key">The key for the data being stored.</param>
            <param name="value">The value of any data being stored.</param>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.GetValue(System.String)">
            <summary>
            Gets a value from our store. Will return null if value was not found.
            </summary>
            <param name="key">The key for the data being stored.</param>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.Save">
            <summary>
            Saves the current data store values to persistent storage.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.Load">
            <summary>
            Loads data for the store.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.SaveProductData(PaddleSDK.PaddleProductInformation)">
            <summary>
            Saves the given product data. Will overwrite all keys.
            </summary>
            <param name="productData"></param>
        </member>
        <member name="M:PaddleSDK.PaddleDataStore.GetProductData">
            <summary>
            Saves the given product data. Will overwrite all keys.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleDataStore.ActivationId">
            <summary>
            The activation Id for this product if activated.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleDataStore.FirstRun">
            <summary>
            When the product was first run (called Start in other SDKs).
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleDataStore.LicenseKey">
            <summary>
            The license key for this product if activated.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleDataStore.LicenseEmail">
            <summary>
            The email that was used to licence this product.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleDataStore.LastProductInformationRefresh">
            <summary>
            The last time the product information was refreshed from the Paddle API.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStoreCryptography.KeySize">
            <summary>
            Key size for the encryption algorithm.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStoreCryptography.InitVector">
            <summary>
            Init vector for PasswordDeriveBytes. Size in bytes must be KeySize / 8. With a KeySize of 256 we need 32 bytes (16 UTF16 chars)
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleDataStoreCryptography.EncryptionKey">
            <summary>
            The encryption key used to write the data.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleDataStoreCryptography.#ctor(System.String)">
            <summary>
            Creates a new PaddleDataStoreCryptography for encrypting data written to the store.
            </summary>
            <param name="productId"></param>
        </member>
        <member name="M:PaddleSDK.PaddleDataStoreCryptography.EncryptForStore(System.String)">
            <summary>
            Encrypts the given string based on our magic key.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PaddleSDK.PaddleDataStoreCryptography.DecryptFromStore(System.Byte[])">
            <summary>
            Decrypts the given store data based on our magic key.
            </summary>
        </member>
        <member name="T:PaddleSDK.PaddleException">
            <summary>
            Wrapper around exceptions thrown by the Paddle SDK.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleException.#ctor">
            <summary>
            Creates a new generic PaddleException.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleException.#ctor(System.String)">
            <summary>
            Creates a PaddleException with the given string message.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a PaddleException wrapping another exception.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleLicenceWindow.Product">
            <summary>
            The product we are activating.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.SetExistingLicence(System.String,System.String)">
            <summary>
            Shows the window with existing licence information that the user can not edit.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.PopulateFromProduct">
            <summary>
            Populates our window components from stored product data. 
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.btnKey_Click(System.Object,System.EventArgs)">
            <summary>
            Handles when the user clicks the Activate button to activate a licence.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.textboxEmail_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles when the email text box is changed.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.textboxLicence_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles when the licence text box is changed.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleLicenceWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PaddleSDK.PaddleLicenceWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProduct.ApiServerBaseUrl">
            <summary>
            The base URL for calls to API server.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProduct.Credentials">
            <summary>
            The credentials needed to talk to the API server.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProduct.Store">
            <summary>
            The store we use to save data.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.#ctor(PaddleSDK.PaddleCredentials,PaddleSDK.PaddleDataStore)">
            <summary>
            Creates a new PaddleProduct instance for managing the product.
            </summary>
            <param name="credentials">Credentials needed to communicate with the Paddle API for this product.</param>
            <param name="store">The data store to persist data back to.</param>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.GetProductInfo">
            <summary>
            Fetches product information from the API if needed.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.ActivateLicence(System.String,System.String)">
            <summary>
            Activates this product licence.
            </summary>
            <param name="email">The email to associate the activation with</param>
            <param name="licenseKey">The liscence key to authorise the activation.</param>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.DeactivateLicence">
            <summary>
            Calls the API to deactive this product's licence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.MakeApiRequest(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Issues the given request batch to Calq's API servers.
            </summary>
            <param name="endpoint">The API endpoint to call (e.g. product/data)</param>
            <param name="apiParameters">The parameters needed to make this API request.</param>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.GetMachineUUID">
            <summary>
            Gets an ID we can use to identify this machine for our licenses later on.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.GetMacAddress">
            <summary>
            Finds the MAC address of the NIC with maximum speed.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProduct.EuropeCounrties">
            <summary>
            Array of countries ISO codes that we say are "in Europe" (enough to display EUR currencies by default).
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProduct.GetCurrencyForCountry">
            <summary>
            Gets the currency used by the given country (that Paddle supports).
            </summary>
            <returns></returns>
        </member>
        <member name="P:PaddleSDK.PaddleProduct.ProductData">
            <summary>
            The information we have on this product.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleProduct.LastErrorMessage">
            <summary>
            The last error message set by the API.
            </summary>
        </member>
        <member name="P:PaddleSDK.PaddleProduct.DaysRemainingOnTrial">
            <summary>
            Gets the days remaining on this product's trial. Will return negative days if trial has expired. Will return 0 if trial
            was not started, or this product has no trial.
            </summary>
        </member>
        <member name="T:PaddleSDK.PaddleProductInformation">
            <summary>
            Information about the product being sold.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.ProductName">
            <summary>
            The name of this product (e.g. My Awesome App).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.DeveloperName">
            <summary>
            The name of the developer for this product (e.g. My Corp).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.Currency">
            <summary>
            The currency this product is in (e.g. USD).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.Price">
            <summary>
            The default price of this product in the provided currency (e.g. 10.99).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.ImageUrl">
            <summary>
            URL to a publically available image of the product to show on previews (e.g. https://vendors.paddle.com/assets/images/checkout/default_product_icon.png).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.TrialLength">
            <summary>
            The default trial length for this product in days (e.g. 7).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.TrialText">
            <summary>
            The short line of text shown to customers on the licensing window (e.g. Thanks for downloading a trial of our My Awesome App).
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductInformation.PaymentUrl">
            <summary>
            The URL used for checkouts. Normally you should let the SDK manage this internally.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductWindow.Product">
            <summary>
            The Product we use to interact with.
            </summary>
        </member>
        <member name="F:PaddleSDK.PaddleProductWindow.ProductId">
            <summary>
            The Id of the product being licensed.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProductWindow.PopulateFromProduct">
            <summary>
            Populates our window components from stored product data. 
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProductWindow.btnBuy_Click(System.Object,System.EventArgs)">
            <summary>
            Handles when the buy button is clicked.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProductWindow.btnLicence_Click(System.Object,System.EventArgs)">
            <summary>
            Handles when the users wants to show the licence key dialog.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:PaddleSDK.PaddleProductWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PaddleSDK.PaddleProductWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PaddleSDK.PaddleProductWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PaddleSDK.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PaddleSDK.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PaddleSDK.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PaddleSDK.Resources.VerifyFailDialogBody">
             <summary>
               Looks up a localized string similar to Sorry. We were unable to verify your license information.
                
            {0}.
             </summary>
        </member>
        <member name="P:PaddleSDK.Resources.VerifyFailDialogTitle">
            <summary>
              Looks up a localized string similar to Uh oh!.
            </summary>
        </member>
        <member name="P:PaddleSDK.Resources.VerifySucceedDialogBody">
            <summary>
              Looks up a localized string similar to Thank you. We have activated your license..
            </summary>
        </member>
        <member name="P:PaddleSDK.Resources.VerifySucceedDialogTitle">
            <summary>
              Looks up a localized string similar to License Activated.
            </summary>
        </member>
        <member name="M:PaddleSDK.Util.DictionaryExtensions.GetValueOrNull``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value from the dictionary or null if not present (means you can't test for null values being explicity set via this method).
            </summary>
        </member>
    </members>
</doc>
